<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Suggested Accounts Viewed</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="flex flex-col justify-center items-center min-h-screen bg-gray-100 p-5">

    <h1 class="text-4xl font-semibold text-purple-600 mb-8 uppercase tracking-wider text-center">Suggested Accounts Viewed</h1>

    <!-- Date Range Filter Inputs -->
    <div class="filter-container flex items-center mb-6">
        <label for="startDate" class="mr-3 text-lg font-medium">Start Date: </label>
        <input type="date" id="startDate" class="border border-purple-500 rounded-lg p-2 text-gray-700 mr-4 focus:outline-none focus:ring-2 focus:ring-purple-600">
        <label for="endDate" class="mr-3 text-lg font-medium">End Date: </label>
        <input type="date" id="endDate" class="border border-purple-500 rounded-lg p-2 text-gray-700 mr-4 focus:outline-none focus:ring-2 focus:ring-purple-600">
        <button onclick="filterByDate()" class="bg-purple-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-500 transition duration-300">Filter</button>
    </div>

    <!-- Sorting dropdown -->
    <div class="sort-container mb-8">
        <label for="sort" class="mr-3 text-lg font-medium">Sort by: </label>
        <select id="sort" onchange="sortTimeline()" class="border border-purple-500 rounded-lg p-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-600">
            <option value="default">Default</option>
            <option value="dateAsc"> Ascending</option>
            <option value="dateDesc">Descending</option>
            <option value="alphabetical">Alphabetical (A-Z)</option>
        </select>
    </div>

    <!-- Timeline View -->
    <div id="timelineView" class="w-full max-w-lg mx-auto p-4 space-y-4 bg-white rounded-lg shadow-md"></div>

    <script>
        const suggestedAccountsList = <%- JSON.stringify(suggestedAccountsList) %>;

        let filteredList = [...suggestedAccountsList]; // Holds the filtered data

        // Function to render timeline
        function renderTimeline(list) {
            const timelineView = document.getElementById('timelineView');
            timelineView.innerHTML = ''; // Clear existing timeline

            if (list.length === 0) {
                timelineView.innerHTML = '<p class="text-center text-gray-600">No accounts viewed in the selected date range.</p>';
                return;
            }

            list.forEach(account => {
                if (account.time !== 'Unknown Time') {
                    const timelineItem = document.createElement('div');
                    timelineItem.classList.add('timeline-item', 'flex', 'justify-between', 'bg-gray-50', 'p-4', 'rounded-lg', 'shadow-sm', 'hover:shadow-md', 'transition', 'duration-300', 'ease-in-out');
                    timelineItem.innerHTML = `
                        <div class="timeline-date font-bold text-gray-700">${new Date(account.time).toLocaleString()}</div>
                        <div class="timeline-content"><a href="https://www.instagram.com/${account.username}" target="_blank" class="text-purple-600 hover:underline font-bold">${account.username}</a></div>
                    `;
                    timelineView.appendChild(timelineItem);
                }
            });
        }

        // Function to sort the timeline
        function sortTimeline() {
            const sortValue = document.getElementById('sort').value;
            let sortedList = [...filteredList];

            if (sortValue === 'dateAsc') {
                sortedList.sort((a, b) => new Date(a.time) - new Date(b.time));
            } else if (sortValue === 'dateDesc') {
                sortedList.sort((a, b) => new Date(b.time) - new Date(a.time));
            } else if (sortValue === 'alphabetical') {
                sortedList.sort((a, b) => a.username.localeCompare(b.username));
            }

            renderTimeline(sortedList);
        }

        // Function to filter by date range
        function filterByDate() {
            const startDateInput = document.getElementById('startDate').value;
            const endDateInput = document.getElementById('endDate').value;

            if (!startDateInput || !endDateInput) {
                alert("Please enter both start and end dates.");
                return;
            }

            const startDate = new Date(startDateInput);
            const endDate = new Date(endDateInput);

            if (startDate > endDate) {
                alert("Start date cannot be after end date.");
                return;
            }

            filteredList = suggestedAccountsList.filter(account => {
                const accountDate = new Date(account.time);
                return accountDate >= startDate && accountDate <= endDate;
            });

            // After filtering, sort based on the current sort selection
            sortTimeline();
        }

        // Function to set min/max date for filtering
        function initializeDateRange() {
            const validDates = suggestedAccountsList
                .filter(account => account.time !== 'Unknown Time')
                .map(account => new Date(account.time));

            const minDate = new Date(Math.min(...validDates));
            const maxDate = new Date(Math.max(...validDates));

            document.getElementById('startDate').min = minDate.toISOString().split('T')[0];
            document.getElementById('startDate').max = maxDate.toISOString().split('T')[0];
            document.getElementById('endDate').min = minDate.toISOString().split('T')[0];
            document.getElementById('endDate').max = maxDate.toISOString().split('T')[0];

            document.getElementById('startDate').value = minDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = maxDate.toISOString().split('T')[0];
        }

        // Initialize timeline on page load
        window.onload = function () {
            initializeDateRange();
            renderTimeline(suggestedAccountsList); // Initial full timeline
        };
    </script>
</body>
</html>
